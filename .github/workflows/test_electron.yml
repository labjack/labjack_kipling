name: Electron build

on:
  workflow_dispatch: # use this to trigger specific builds
  push: 
   branches: [ main, development, ci_building ] 

jobs:
  build:
    environment: kipling_env

    strategy:
      matrix:
        node-version: [16.15.0]
        platform: [macos-latest]
        #platform: [windows-latest]
        # platform: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
#      - name: Download ljm
#        uses: wei/wget@v1
#        with:
#          args: -O labjack_ljm_software.tar.gz https://labjack.com/sites/default/files/software/labjack_ljm_software_2019_07_16_x86_64.tar.gz
#      - name: Install ljm
#        run: tar xfz labjack_ljm_software.tar.gz && cd ./labjack_ljm_software_2019_07_16_x86_64 && sudo ./labjack_ljm_installer.run
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      #- run: npm ci # doesn't work with node8
      - run: npm install
      - run: npm run setup_ci
      #- name: Fix lerna mess
        #run: node ./scripts/fix_lerna_backup.js
      # - name: Check ENV
      #   env:
      #     CSC_LINK: ${{ secrets.CERTIFICATE_P12 }}
      #     CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_P12_PASSWORD }}
      #     BUILD_DIR: ${{ github.workspace }}/build
      #     USE_HARD_LINKS: "false"
      #   run: echo "$GITHUB_CONTEXT"

      - name: Install Apple Certificate and Create Keychain
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_P12 }}
          P12_PASSWORD: ${{ secrets.CERTIFICATE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.PROD_MACOS_KEYCHAIN_PWD }}
        run: |
          # create variables
          # CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          # PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          # KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # # import certificate and provisioning profile from secrets
          # echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          # # echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # # create temporary keychain
          # security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          # security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # # import certificate to keychain
          # security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          # security list-keychain -d user -s $KEYCHAIN_PATH

          # # apply provisioning profile
          # # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles


          # # Turn our base64-encoded certificate back to a regular .p12 file
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12

          # Setup Keychain for MacOS codesigning
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain 
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          security find-identity -v

          
      - name: Build and Sign
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          CSC_LINK: ${{ secrets.CERTIFICATE_P12 }}
          CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_P12_PASSWORD }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_KEYCHAIN_PWD }}
          BUILD_DIR: ${{ github.workspace }}/build
          USE_HARD_LINKS: "false"
        run: |
          # Turn our base64-encoded certificate back to a regular .p12 file
          # echo $CSC_LINK | base64 --decode > certificate.p12

          # # Setup Keychain for MacOS codesigning
          # security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain 
          # security default-keychain -s build.keychain
          # security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          # security import certificate.p12 -k build.keychain -P "$CSC_KEY_PASSWORD" -T /usr/bin/codesign
          # security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          

          security find-identity -v

          # Build Project
          npm run build

          #try codesign 

          /usr/bin/codesign --force -s "LabJack Corporation (HESU4UBGJK)" ${{ github.workspace }}/build/output/dist/Kipling-3.3.3-beta.0.pkg
          /usr/bin/codesign --force -s "LabJack Corporation" ${{ github.workspace }}/build/output/dist/Kipling-3.3.3-beta.0.pkg

          /usr/bin/codesign -dv --verbose=4 /Path/To/Application.app ${{ github.workspace }}/build/output/dist/Kipling-3.3.3-beta.0.pkg
          
      - run: ls ${{ github.workspace }}/build/output/dist

      - uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: ${{ github.workspace }}/build/output/dist/*



